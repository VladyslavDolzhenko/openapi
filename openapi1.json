{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "my-blob-svc",
    "description": ""
  },
  "servers": [
    {
      "url": "https://api.demo.tokend.io",
      "description": "TokenD Developer Environment"
    }
  ],
  "paths": {
    "/blob": {
      "post": {
        "tags": [
          "Blobs"
        ],
        "summary": "/blob",
        "operationId": "Add a new blob to the db",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlobRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blob created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBlobResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Blob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          },
          "country": {
            "type": "string"
          },
          "birth_date": {
            "type": "string",
            "format": "date"
          },
          "specialty": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "user_id",
          "first_name",
          "last_name",
          "age",
          "country",
          "birth_date",
          "specialty"
        ]
      },
      "CreateBlobRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "blobs"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/Blob"
              }
            }
          }
        }
      },
      "CreateBlobResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Blob"
          }
        }
      },
      "Errors": {
        "description": "Standard JSON:API error",
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "description": "Non empty array of errors occurred during request processing",
            "items": {
              "type": "object",
              "required": [
                "title",
                "status"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title is a short, human-readable summary of the problem",
                  "example": "Bad Request"
                },
                "detail": {
                  "type": "string",
                  "description": "Detail is a human-readable explanation specific to this occurrence of the problem",
                  "example": "Request body was expected"
                },
                "status": {
                  "type": "integer",
                  "description": "Status is the HTTP status code applicable to this problem",
                  "example": 400,
                  "enum": [
                    400,
                    401,
                    403,
                    404,
                    409,
                    500
                  ]
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "pageLimitParam": {
        "in": "query",
        "name": "page[limit]",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 15,
          "description": "Numbers of items per page to return."
        }
      },
      "pageNumberParam": {
        "in": "query",
        "name": "page[number]",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of a page to return."
      },
      "sortingParam": {
        "in": "query",
        "name": "page[order]",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "desc",
          "description": "Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID."
        }
      }
    }
  }
}
